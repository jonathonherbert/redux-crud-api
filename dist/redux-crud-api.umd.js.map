{"version":3,"file":"redux-crud-api.umd.js","sources":["../src/utils/saga.ts","../src/createAPIResource.ts"],"sourcesContent":["import noop from 'lodash/noop'\nimport Actions, { createAction } from 'redux-actions'\n\nconst metaCreator = (_: any, resolve = noop, reject = noop) => ({ resolve, reject })\n\nexport const createPromiseAction = (type: any, payloadCreator: any) => createAction(type, payloadCreator, metaCreator)\n\nexport const bindActionToPromise = (dispatch: (action: any) => any, actionCreator: (payload: any, resolve: any, reject: any) => any) => (payload: any) => {\n\treturn new Promise((resolve, reject) => dispatch(actionCreator(payload, resolve, reject)))\n}\n","import filter from 'lodash/filter'\nimport find from 'lodash/find'\nimport identity from 'lodash/identity'\nimport kebabCase from 'lodash/kebabCase'\nimport noop from 'lodash/noop'\nimport orderBy from 'lodash/orderBy'\nimport { normalize, Schema } from 'normalizr'\nimport * as qs from 'querystring'\nimport { batchActions } from 'redux-batched-actions'\nimport reduxCrud from 'redux-crud'\nimport { takeLatest } from 'redux-saga'\nimport { apply, call, put, select } from 'redux-saga/effects'\nimport v4 from 'uuid/v4'\nimport 'whatwg-fetch'\n\nimport { createPromiseAction } from './utils/saga'\n\n// The names we use for actions don't map to the redux-crud action names, so we do that here.\nconst mapActionToCRUDAction = {\n\tcreate: 'create',\n\tdel: 'delete',\n\tfetch: 'fetch',\n\tsearch: 'fetch',\n\tupdate: 'update',\n} as {[action: string]: string}\n\n// The names we use for actions also must map to the http methods.\nconst mapActionToHTTPMethod = {\n\tcreate: 'post',\n\tupdate: 'put',\n\tdel: 'delete',\n\tfetch: 'get',\n\tsearch: 'get',\n} as {[action: string]: string}\n\n// The default actions available.\nconst availableActions = ['create', 'update', 'del', 'fetch', 'search']\n\ninterface ICreateAPIActionOptions {\n\t// The name of the resource, in the singular\n\tresourceName: string\n\t// The action creators generated by redux-crud\n\tactionCreators: any\n\t// The selectors generated by redux-crud\n\tselectors: any\n\t// The name of the action to dispatch\n\tactionName: string\n\t// The HTTP method\n\tmethod: string\n\t// The base url for the API action\n\tbaseUrl: string\n\t// Will be used to set basic auth headers\n\tselectAuthToken?: (state: any) => string\n\t// The relations of the model being used\n\trelations: any\n\t// The function that models are passed through when they're received\n\ttransformIn: (model: any) => any\n\t// The function that models are passed through when they're sent\n\ttransformOut: (model: any) => any\n}\n\ninterface IAPIActionOptions {\n\tpayload: {\n\t\tresource: any\n\t\toptions: {\n\t\t\tendpoint: string\n\t\t\tcontentType: string\n\t\t}\n\t},\n\tmeta: {\n\t\tresolve: () => any\n\t\treject: () => any\n\t}\n}\n\n/**\n * Creates a saga that handles API operations.\n * Updates optimistically when updating or creating.\n *\n * @param {ICreateAPIActionOptions}\n */\nfunction createAPIAction({\n\tresourceName,\n\tbaseUrl,\n\tactionCreators,\n\tactionName,\n\tmethod,\n\tselectAuthToken,\n\tselectors,\n\trelations,\n\ttransformIn,\n\ttransformOut\n}: ICreateAPIActionOptions) {\n\t/**\n\t * Generator for the given action.\n\t * Accepts FSA containing a payload with property 'resource' containing request data.\n\t * Dispatches start (if applicable) action, makes HTTP calls, dispatches success/error actions with result.\n\t *\n\t * @param {FSA} action\n\t *  {\n\t * \t\tpayload: {\n\t * \t\t\tresource: any  The resource. This is named grossly right now.\n\t * \t\t\t\tReally it's whatever params the op needs to work, e.g.\n\t * \t\t\t\tan ID, search params, a whole model. The ambiguity is rubbish.\n\t * \t\t\toptions: {\n\t * \t\t\t\tendpoint: string  An endpoint to add to the default REST request.\n\t * \t\t\t}\n\t * \t\t},\n\t * \t\tmeta: {\n\t * \t\t\tresolve: Function  The function called when the saga is done\n\t * \t\t\treject: Function  The function called if the saga throws\n\t * \t\t}\n\t *  }\n\t */\n\treturn function *({ payload, meta: { resolve, reject } }: IAPIActionOptions) {\n\t\t// We store a client id here for optimistic creation\n\t\tlet resource\n\t\tlet options\n\t\tlet cid\n\t\tconst relationKeys = {} as {[relationId: string]: any[]}\n\t\tconst crudAction = mapActionToCRUDAction[actionName]\n\t\tif (payload) {\n\t\t\t({ resource, options } = payload)\n\t\t}\n\n\t\tlet localResource = { ...resource }\n\n\t\t// If we're creating a record, give it the client id if it doesn't have one already\n\t\tif (actionName === 'create') {\n\t\t\tif (localResource.id) {\n\t\t\t\tcid = localResource.id\n\t\t\t} else {\n\t\t\t\tcid = localResource.id = v4()\n\t\t\t}\n\t\t}\n\n\t\t// If we're updating a model, merge it with what's current in the state\n\t\tif (actionName === 'update') {\n\t\t\tconst modelFromState = yield select(selectors.findById, localResource.id)\n\t\t\tif (!modelFromState) {\n\t\t\t\tyield call(reject, `Could not select model with id ${resource.id}`)\n\t\t\t}\n\t\t\tlocalResource = { ...modelFromState, ...localResource }\n\t\t}\n\n\t\t// Dispatch our start action, if there is one for the given action\n\t\tif (resource && actionCreators[crudAction + 'Start']) {\n\t\t\tif (relations && (actionName === 'update' || actionName === 'create')) {\n\t\t\t\tconst schema = Array.isArray(localResource) ? [relations.schema] : relations.schema\n\t\t\t\tconst normalisedResource = normalize(localResource, schema)\n\t\t\t\tfor (const i in relations.map) {\n\t\t\t\t\tconst relationData = normalisedResource.entities[i]\n\t\t\t\t\tif (!relationData) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\t// We store relation keys (cids) in order here.\n\t\t\t\t\t// When we receive relation updates at the end of the action,\n\t\t\t\t\t// we can replay these keys in order to sync with optimistic updates.\n\t\t\t\t\trelationKeys[i] = []\n\t\t\t\t\tconst actions: any[] = []\n\n\t\t\t\t\tif (relationData.undefined) {\n\t\t\t\t\t\tconsole.warn(`One or more of the relations you\\'re trying to ${actionName} is missing an id.\\\n\t\t\t\t\t\t\tBad things are likely to happen as a result.`)\n\t\t\t\t\t}\n\t\t\t\t\tObject.keys(relationData).forEach(id => {\n\t\t\t\t\t\trelationKeys[i].push(id)\n\t\t\t\t\t\tactions.push(relations.map[i][crudAction + 'Start'](relationData[id]))\n\t\t\t\t\t})\n\t\t\t\t\tyield put(batchActions(actions))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tyield put(actionCreators[crudAction + 'Start'](localResource))\n\t\t\t}\n\t\t}\n\n\t\t// Build the request string\n\t\tlet requestString = `${baseUrl}/${kebabCase(resourceName)}`\n\t\t// If we have a specific resource or request type, append it to request URL\n\t\tif ((method === 'get' && actionName !== 'search' && localResource.id) || method === 'delete' || method === 'put') {\n\t\t\trequestString += `/${localResource.id}`\n\t\t}\n\t\tif (actionName === 'search') {\n\t\t\trequestString += '/search'\n\t\t}\n\t\tif (options && options.endpoint) {\n\t\t\trequestString += `/${options.endpoint}`\n\t\t}\n\n\t\tconst requestOptions: {\n\t\t\tmethod: string,\n\t\t\theaders: Headers,\n\t\t\tbody?: string | FormData,\n\t\t} = {\n\t\t\t\tmethod: method.toUpperCase(),\n\t\t\t\theaders: new Headers(),\n\t\t\t}\n\n\t\t// Add the request body if we're sending data\n\t\tif (method === 'post' || method === 'put') {\n\t\t\tconst contentType = options && options.contentType ? options.contentType : 'application/json'\n\t\t\tconst resourceToSend = transformOut({ ...localResource })\n\t\t\tif (actionName === 'create') {\n\t\t\t\tdelete resourceToSend.id;\n\t\t\t}\n\t\t\tif (contentType !== 'multipart/form-data') {\n\t\t\t\trequestOptions.headers.append('content-type', contentType)\n\t\t\t}\n\t\t\trequestOptions.body = createRequestBody(contentType, resourceToSend);\n\t\t}\n\n\t\tif (actionName === 'search') {\n\t\t\trequestString += `?${qs.stringify(localResource)}`\n\t\t}\n\n\t\t// Add the authentication code to the header, if we have a selector\n\t\tif (selectAuthToken) {\n\t\t\tconst token = yield select(selectAuthToken)\n\t\t\trequestOptions.headers.append('Authorization', `Bearer ${token}`)\n\t\t}\n\n\t\t// Make the request and handle the response\n\t\ttry {\n\t\t\tconst response = yield call(fetch, requestString, requestOptions)\n\t\t\tif (response.status < 200 || response.status > 299) {\n\t\t\t\tthrow new Error(`HTTP Error: ${response.status}`)\n\t\t\t}\n\t\t\tlet data\n\t\t\tif (actionName === 'del') {\n\t\t\t\tdata = localResource\n\t\t\t} else {\n\t\t\t\t// We take the data from the 'data' envelope, if it exists,\n\t\t\t\t// or from the json directly if it doesn't.\n\t\t\t\t// It'd be good to let the user provide an envelope.\n\t\t\t\tconst json = yield apply(response, response.json)\n\t\t\t\tdata = json.data ? json.data : json\n\t\t\t\t// Apply transforms\n\t\t\t\tconst dataIsArray = Array.isArray(data)\n\t\t\t\tif (dataIsArray) {\n\t\t\t\t\tdata = data.map((item: any) => transformIn(item))\n\t\t\t\t} else {\n\t\t\t\t\tdata = transformIn(data)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there aren't any relations or we're not running a fetch or update, do a basic persist\n\t\t\tif (!relations\n\t\t\t\t|| (crudAction !== 'fetch'\n\t\t\t\t\t&& crudAction !== 'update')) {\n\t\t\t\tif (actionName === 'create') {\n\t\t\t\t\tyield put(actionCreators[crudAction + 'Success'](data, cid))\n\t\t\t\t} else {\n\t\t\t\t\tyield put(actionCreators[crudAction + 'Success'](data))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If we do have relations, normalise the incoming data, and dispatch persist\n\t\t\t\t// operations for each model. We check here to see if the data is an array (collection),\n\t\t\t\t// and adjust the schema accordingly.\n\t\t\t\tconst normalisedData = normalize(data, Array.isArray(data) ? [relations.schema] : relations.schema)\n\t\t\t\tfor (const i in relations.map) {\n\t\t\t\t\tconst relationData = normalisedData.entities[i]\n\t\t\t\t\tif (!relationData) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tconst actions: any[] = []\n\t\t\t\t\tObject.keys(relationData).forEach((id, index) => {\n\t\t\t\t\t\tif (crudAction === 'fetch') {\n\t\t\t\t\t\t\tactions.push(relations.map[i][crudAction + 'Success'](relationData[id]))\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// We use the previously stored cid to reconcile updates here.\n\t\t\t\t\t\t\t// It's imperative that relations come back in the same order they went out!\n\t\t\t\t\t\t\tactions.push(relations.map[i][crudAction + 'Success'](\n\t\t\t\t\t\t\t\trelationData[id],\n\t\t\t\t\t\t\t\trelationKeys[i] ? relationKeys[i][index] : null))\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tyield put(batchActions(actions))\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Once we're done, call resolve for the Promise caller\n\t\t\tyield call(resolve, data)\n\t\t} catch (e) {\n\t\t\tif (method === 'get') {\n\t\t\t\tyield put(actionCreators[crudAction + 'Error'](e.message))\n\t\t\t} else {\n\t\t\t\t// Methods that persist data require the resource to revert optimistic updates\n\t\t\t\tyield put(actionCreators[crudAction + 'Error'](e.message, localResource))\n\t\t\t}\n\n\t\t\t// Call reject for the Promise caller\n\t\t\tyield call(reject, e.message)\n\t\t}\n\t};\n}\n\n// Selectors\n// ---------\n\n/**\n * Create selectors for the given resource namespace.\n *\n * @param {string} resourceName - The name of the resource as appears in the state\n * @return {any} Object with selector methods\n */\nfunction createSelectors(resourceName: string) {\n\treturn {\n\t\t/**\n\t\t * @inheritdocs\n\t\t */\n\t\tfindById(state: any, id: string) {\n\t\t\treturn state[resourceName][id] || null\n\t\t},\n\n\t\t/**\n\t\t * @inheritdocs\n\t\t */\n\t\tfindByCid(state: any, cid: string) {\n\t\t\treturn find(state[resourceName], (item: { _cid: string }) => item._cid === cid)\n\t\t},\n\n\t\t/**\n\t\t * @inheritdocs\n\t\t */\n\t\tfilter(state: any, predicate: Function) {\n\t\t\treturn filter(state[resourceName], predicate)\n\t\t},\n\n\t\torderBy(state: any, predicate: any[] | any[][] | Function[] | string[], order: string) {\n\t\t\treturn orderBy(state[resourceName], predicate, order)\n\t\t},\n\n\t\t/**\n\t\t * @inheritdocs\n\t\t */\n\t\tfindAll(state: any) {\n\t\t\treturn state[resourceName]\n\t\t}\n\t}\n}\n\nexport interface ICreateAPIResourceOptions {\n\t// The name of the resource, conventionally in the singular\n\tresourceName: string\n\t// The base url of the resource\n\tbaseUrl: string\n\t// The actions to add to the returned object\n\tactions?: string[],\n\t// Will be used to set basic auth headers\n\tselectAuthToken?: (state: any) => string\n\t/**\n\t * The relations options. We provide a Normalizr Schema object\n\t * \there to process the incoming data, and a map between any additional entity names and\n\t * \ttheir reducer functions. For example:\n\t * ```js{\n\t * \tschema: book,\n\t * \tmap: {\n\t * \t\tauthor: author.actions\n\t * \t}\n\t * }```\n\t * would update authors nested in data returned from the Book resource.\n\t */\n\trelations?: {\n\t\tschema: Schema,\n\t\tmap: {\n\t\t\t[key: string]: any\n\t\t}\n\t},\n\toptions?: {\n\t\t// The function that models are passed through when they're received\n\t\ttransformIn: (model: any) => any\n\t\t// The function that models are passed through when they're sent\n\t\ttransformOut: (model: any) => any\n\t}\n}\n\n/**\n * Creates an object with api methods keyed by name.\n * All of these actions can be dispatched as normal.\n * They will dispatch start (where available), success and error actions\n * in turn, making the http request to the API, the idea being, generic CRUD.\n *\n * @returns {IAPIResource}\n */\nfunction createAPIResource({\n\tresourceName,\n\tbaseUrl,\n\tactions = availableActions,\n\tselectAuthToken,\n\trelations,\n\toptions = {\n\t\ttransformIn: identity,\n\t\ttransformOut: identity,\n\t}\n}: ICreateAPIResourceOptions) {\n\tconst actionCreators = reduxCrud.actionCreatorsFor(resourceName)\n\tconst selectors = createSelectors(resourceName)\n\tconst apiResource = {\n\t\tworkers: {} as { [action: string]: any },\n\t\tsagas: {} as { [action: string]: any },\n\t\tactions: actionCreators as any,\n\t\tactionNames: reduxCrud.actionTypesFor(resourceName),\n\t\tselectors,\n\t\treducers: reduxCrud.Map.reducersFor(resourceName)\n\t}\n\n\t// Create a resource for each of our actions\n\tactions.forEach((actionName) => {\n\t\tif (!mapActionToHTTPMethod[actionName]) {\n\t\t\tthrow new Error(`Method ${actionName} not supported for resource ${resourceName}`)\n\t\t}\n\n\t\t// Create the action constant\n\t\tapiResource.actionNames[actionName] = `${resourceName.toUpperCase()}_${actionName.toUpperCase()}`\n\n\t\t// Create the request FSA\n\t\tapiResource.actions[actionName] = createPromiseAction(\n\t\t\tapiResource.actionNames[actionName],\n\t\t\tidentity\n\t\t)\n\n\t\t// If we've got relations, add the root relation to the relations map.\n\t\t// This saves us doing it for every persist operation, and lets us iterate\n\t\t// over the whole resource with the relations map.\n\t\tif (relations) {\n\t\t\trelations.map[resourceName] = actionCreators\n\t\t}\n\n\t\t// Create the worker saga\n\t\tapiResource.workers[actionName] = createAPIAction({\n\t\t\tresourceName,\n\t\t\tbaseUrl,\n\t\t\tactionCreators,\n\t\t\tselectors,\n\t\t\tactionName,\n\t\t\tmethod: mapActionToHTTPMethod[actionName],\n\t\t\tselectAuthToken,\n\t\t\trelations,\n\t\t\ttransformIn: options.transformIn || identity,\n\t\t\ttransformOut: options.transformOut || identity\n\t\t})\n\n\t\t// Create the watcher saga\n\t\tapiResource.sagas[actionName] = function *() {\n\t\t\tyield call(takeLatest, apiResource.actionNames[actionName], apiResource.workers[actionName])\n\t\t}\n\t});\n\treturn apiResource;\n}\n\n/**\n * Creates a request body given a content type.\n *\n * @param {string} contentType e.g. application/json\n * @param {any} resource The resource to send.\n * @return {any} The request body data\n */\nfunction createRequestBody(contentType: string, resource: any) {\n\tswitch (contentType) {\n\t\tcase 'application/json':\n\t\t\treturn JSON.stringify(resource);\n\t\tcase 'multipart/form-data':\n\t\t\tconst formData = new FormData();\n\t\t\tfor (const name in resource) {\n\t\t\t\tformData.append(name, resource[name]);\n\t\t\t}\n\t\t\treturn formData;\n\t\tdefault:\n\t\t\tthrow new Error(`Could not create request body: there is no handler for content-type: ${contentType}`);\n\t}\n}\n\nexport default createAPIResource;\n"],"names":["createAction","select","call","normalize","put","batchActions","qs.stringify","apply","takeLatest"],"mappings":"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"}